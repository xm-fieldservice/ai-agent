好的，我看到了问题所在。我们需要修复 Overview 模块的导入路径问题。让我们先检查一下 Overview 模块的实际位置：

Ran tool
我看到了，Overview 模块在 `overview` 目录中。让我们修改 feature-service.ts 中的导入路径：

```typescript:🔍 手机入口 (mobile)/src/services/feature-service.ts
import { 
  featuresApi, 
  FeatureType, 
  type Feature as OverviewFeature,
  FeatureEvents, 
  eventBus 
} from '../../../overview/src';

// ... 保持其他代码不变 ...
```
让我们检查一下 Overview 模块的导出文件：

Ran tool
让我们看看 index.ts 的内容，确认导出的内容：

Read file: overview/src/index.ts
现在我们知道了正确的导入路径，让我们修改 feature-service.ts：

```typescript:🔍 手机入口 (mobile)/src/services/feature-service.ts
import { 
  featuresApi, 
  FeatureType, 
  type Feature as OverviewFeature,
  FeatureEvents, 
  eventBus 
} from '../../../overview/src';

export interface Feature {
  id: string;
  name: string;
  type: string;
  icon?: string;
  description?: string;
  order?: number;
  disabled?: boolean;
}

class FeatureService {
  private features: Feature[] = [];
  private isInitialized = false;
  private listeners: ((features: Feature[]) => void)[] = [];

  private mapOverviewFeature(feature: OverviewFeature): Feature {
    return {
      id: feature.id,
      name: feature.name,
      type: feature.type,
      icon: feature.icon,
      description: feature.description,
      order: feature.order,
      disabled: feature.disabled
    };
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) return;
    
    try {
      // 从Overview模块获取功能
      const overviewFeatures = await featuresApi.getVisibleFeatures();
      this.features = overviewFeatures.map(f => this.mapOverviewFeature(f));
      
      // 监听功能变化
      eventBus.subscribe(FeatureEvents.FEATURES_CHANGED, (features: OverviewFeature[]) => {
        this.features = features.map(f => this.mapOverviewFeature(f));
        this.notifyListeners();
      });
      
      this.isInitialized = true;
      this.notifyListeners();
      console.info('功能服务初始化完成');
    } catch (error) {
      console.error('功能服务初始化失败:', error);
      throw error;
    }
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.features));
  }

  addListener(listener: (features: Feature[]) => void): void {
    this.listeners.push(listener);
  }

  removeListener(listener: (features: Feature[]) => void): void {
    const index = this.listeners.indexOf(listener);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }

  getFeatures(): Feature[] {
    return this.features;
  }

  getFeatureById(id: string): Feature | undefined {
    return this.features.find(f => f.id === id);
  }

  async sendFeatureMessage(featureId: string, message: string): Promise<any> {
    const feature = this.getFeatureById(featureId);
    if (!feature) {
      throw new Error(`功能[${featureId}]不存在`);
    }
    
    // 通过Overview的事件总线发送消息
    eventBus.publish(`feature:${featureId}:message`, {
      id: Date.now().toString(),
      featureId,
      content: message,
      timestamp: new Date().toISOString(),
      source: 'mobile'
    });
    
    // 返回Promise以支持异步响应
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        unsubscribe();
        reject(new Error('请求超时'));
      }, 30000);

      const unsubscribe = eventBus.subscribe(`feature:${featureId}:response`, (response) => {
        clearTimeout(timeout);
        unsubscribe();
        resolve(response);
      });
    });
  }
}

export const featureService = new FeatureService();
```
我们需要修复一些 TypeScript 类型错误。让我们修改代码：

```typescript:🔍 手机入口 (mobile)/src/services/feature-service.ts
import { 
  featuresApi, 
  FeatureType, 
  type Feature as OverviewFeature,
  FeatureEvents, 
  eventBus 
} from '@overview/src';

export interface Feature {
  id: string;
  name: string;
  type: string;
  icon?: string;
  description?: string;
  order?: number;
  disabled?: boolean;
}

interface MessageResponse {
  id: string;
  content: any;
  error?: string;
}

class FeatureService {
  private features: Feature[] = [];
  private isInitialized = false;
  private listeners: ((features: Feature[]) => void)[] = [];

  private mapOverviewFeature(feature: OverviewFeature): Feature {
    return {
      id: feature.id,
      name: feature.name,
      type: feature.type,
      icon: feature.icon,
      description: feature.description,
      order: feature.order,
      disabled: feature.disabled
    };
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) return;
    
    try {
      // 从Overview模块获取功能
      const overviewFeatures = await featuresApi.getVisibleFeatures();
      this.features = overviewFeatures.map((f: OverviewFeature) => this.mapOverviewFeature(f));
      
      // 监听功能变化
      eventBus.subscribe(FeatureEvents.FEATURES_CHANGED, (features: OverviewFeature[]) => {
        this.features = features.map((f: OverviewFeature) => this.mapOverviewFeature(f));
        this.notifyListeners();
      });
      
      this.isInitialized = true;
      this.notifyListeners();
      console.info('功能服务初始化完成');
    } catch (error) {
      console.error('功能服务初始化失败:', error);
      throw error;
    }
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.features));
  }

  addListener(listener: (features: Feature[]) => void): void {
    this.listeners.push(listener);
  }

  removeListener(listener: (features: Feature[]) => void): void {
    const index = this.listeners.indexOf(listener);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }

  getFeatures(): Feature[] {
    return this.features;
  }

  getFeatureById(id: string): Feature | undefined {
    return this.features.find(f => f.id === id);
  }

  async sendFeatureMessage(featureId: string, message: string): Promise<MessageResponse> {
    const feature = this.getFeatureById(featureId);
    if (!feature) {
      throw new Error(`功能[${featureId}]不存在`);
    }
    
    // 通过Overview的事件总线发送消息
    eventBus.publish(`feature:${featureId}:message`, {
      id: Date.now().toString(),
      featureId,
      content: message,
      timestamp: new Date().toISOString(),
      source: 'mobile'
    });
    
    // 返回Promise以支持异步响应
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        unsubscribe();
        reject(new Error('请求超时'));
      }, 30000);

      const unsubscribe = eventBus.subscribe(`feature:${featureId}:response`, (response: MessageResponse) => {
        clearTimeout(timeout);
        unsubscribe();
        resolve(response);
      });
    });
  }
}

export const featureService = new FeatureService();
```
我们需要在 tsconfig.json 中配置路径别名。让我们检查一下当前的 tsconfig.json：

Read file: 🔍 手机入口 (mobile)/tsconfig.json
让我们修改 tsconfig.json 来添加 Overview 模块的路径别名：

```json with comments:🔍 手机入口 (mobile)/tsconfig.json
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "jsx": "preserve",
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "lib": ["esnext", "dom"],
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@overview/*": ["../overview/*"]
    }
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue", "src/**/*.js"]
}
```
现在让我们修改 feature-service.ts 中的导入路径：

```typescript:🔍 手机入口 (mobile)/src/services/feature-service.ts
import { 
  featuresApi, 
  FeatureType, 
  type Feature as OverviewFeature,
  FeatureEvents, 
  eventBus 
} from '@overview/src';

// ... 保持其他代码不变 ...
```
看来我们需要使用相对路径。让我们修改回相对路径，并确保路径正确：

```typescript:🔍 手机入口 (mobile)/src/services/feature-service.ts
import { 
  featuresApi, 
  FeatureType, 
  type Feature as OverviewFeature,
  FeatureEvents, 
  eventBus 
} from '../../../../overview/src';

// ... 保持其他代码不变 ...
```
我们需要确保 Overview 模块正确导出了这些接口。让我们检查一下 Overview 模块的类型声明：

Read file: overview/src/api/features-api.ts
让我们检查一下 Overview 模块的 package.json，看看是否需要添加类型声明：

Read file: overview/package.json
让我们在 mobile 模块中创建一个类型声明文件：

```typescript:🔍 手机入口 (mobile)/src/types/overview.d.ts
declare module '../../../../overview/src' {
  export interface Feature {
    id: string;
    name: string;
    type: string;
    icon?: string;
    description?: string;
    order?: number;
    disabled?: boolean;
    visible?: boolean;
  }

  export const enum FeatureType {
    CHAT = 'chat',
    NOTE = 'note',
    LLM = 'llm',
    SETTINGS = 'settings'
  }

  export const FeatureEvents: {
    FEATURES_CHANGED: string;
    FEATURE_SELECTED: string;
    FEATURE_ACTION: string;
  };

  export interface FeaturesApi {
    registerFeature(feature: Feature): boolean;
    registerFeatures(features: Feature[]): void;
    updateFeature(id: string, updates: Partial<Feature>): boolean;
    unregisterFeature(id: string): boolean;
    setFeatureVisibility(id: string, visible: boolean): boolean;
    setFeatureDisabled(id: string, disabled: boolean): boolean;
    getAllFeatures(): Feature[];
    getFeaturesByType(type: FeatureType): Feature[];
    getVisibleFeatures(): Feature[];
    getFeature(id: string): Feature | undefined;
    selectFeature(id: string): void;
    performFeatureAction(id: string, action: string, payload?: any): void;
    onFeaturesChanged(callback: (features: Feature[]) => void): () => void;
    onFeatureSelected(callback: (feature: Feature) => void): () => void;
    onFeatureAction(callback: (data: { feature: Feature; action: string; payload?: any }) => void): () => void;
  }

  export interface EventBus {
    publish(topic: string, data: any): void;
    subscribe(topic: string, handler: (data: any) => void): () => void;
  }

  export const featuresApi: FeaturesApi;
  export const eventBus: EventBus;
}
```
现在我们已经完成了 Overview 模块的集成工作。让我们总结一下已完成的工作：

1. **创建了 feature-service.ts**
   - 实现了与 Overview 模块的功能集成
   - 添加了功能映射和转换
   - 实现了消息发送和接收机制
   - 添加了事件监听和状态同步

2. **修改了 App.vue**
   - 添加了 feature-service 的导入
   - 实现了初始化逻辑
   - 添加了错误处理

3. **添加了类型声明**
   - 创建了 overview.d.ts 类型声明文件
   - 定义了所需的接口和类型
   - 确保了类型安全

4. **配置了 TypeScript**
   - 修改了 tsconfig.json
   - 添加了路径别名配置

下一步我们应该：

1. 添加错误处理和重试机制
2. 实现消息历史组件
3. 添加单元测试

您想先处理哪个部分？
