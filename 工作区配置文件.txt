工作区配置文件(.code-workspace)中除了定义文件夹结构外，还可以配置以下必须通过配置文件才能生成的内容：

1. 共享设置（settings）：为整个工作区中的所有项目定义统一的设置
2. 启动配置（launch）：定义调试和运行配置
3. 任务配置（tasks）：定义工作区级别的任务
4. 扩展推荐（extensions）：推荐安装的扩展
5. 远程设置（remoteAuthority）：远程开发的配置

对于项目间相互调用、依赖和联调，可以通过：
- 工作区的路径映射设置
- 在settings中配置跨项目的路径别名
- 通过extensions配置项目间协作所需的扩展

完整的工作区配置结构可以包含：

```json
{
  "folders": [
    { "name": "项目1", "path": "./project1" }
  ],
  "settings": {
    "共享设置键": "值"
  },
  "launch": {
    "configurations": [],
    "compounds": []
  },
  "tasks": {
    "version": "2.0.0",
    "tasks": []
  },
  "extensions": {
    "recommendations": []
  },
  "remoteAuthority": "配置"
}
```

项目间的依赖关系通常需要在各自的项目配置文件(如package.json等)中额外定义。


# VSCode工作区配置文件详解

## 1. 工作区配置文件(.code-workspace)

工作区配置文件是一个JSON文件，主要包含以下部分：

### 1.1 folders - 文件夹配置

```json
"folders": [
  {
    "name": "显示名称", 
    "path": "相对或绝对路径"
  },
  {
    "name": "另一个项目",
    "path": "./another-project"
  }
]
```
- `name`：在VSCode边栏中显示的名称，可以使用emoji
- `path`：文件夹路径，可以是相对路径或绝对路径

### 1.2 settings - 工作区设置

```json
"settings": {
  "editor.tabSize": 2,
  "files.exclude": {
    "**/.git": true,
    "**/node_modules": true
  },
  "search.exclude": {
    "**/dist": true
  },
  "typescript.tsdk": "./node_modules/typescript/lib",
  "eslint.workingDirectories": [
    { "directory": "./project1", "changeProcessCWD": true },
    { "directory": "./project2", "changeProcessCWD": true }
  ],
  "path-intellisense.mappings": {
    "@app": "${workspaceFolder}/src/app",
    "@shared": "${workspaceFolder}/src/shared"
  }
}
```
这些设置会覆盖用户设置，但可以被文件夹设置覆盖。

### 1.3 launch - 调试配置

```json
"launch": {
  "version": "0.2.0",
  "configurations": [
    {
      "name": "启动应用",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder:项目名}/src/main.js",
      "cwd": "${workspaceFolder:项目名}",
      "env": {
        "NODE_ENV": "development"
      }
    }
  ],
  "compounds": [
    {
      "name": "前后端同时启动",
      "configurations": ["启动前端", "启动后端"]
    }
  ]
}
```
- `configurations`：定义可选的调试配置
- `compounds`：组合多个调试配置，实现同时启动多个配置
- 可以使用`${workspaceFolder:项目名}`引用特定工作区文件夹

### 1.4 tasks - 任务配置

```json
"tasks": {
  "version": "2.0.0",
  "tasks": [
    {
      "label": "构建所有项目",
      "type": "shell",
      "command": "bash",
      "args": ["./scripts/build-all.sh"],
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "启动项目1",
      "type": "npm",
      "script": "start",
      "path": "${workspaceFolder:项目1}",
      "problemMatcher": []
    }
  ]
}
```
- 定义可以在整个工作区中运行的任务
- 可以设置依赖任务、组任务以及问题匹配器

### 1.5 extensions - 扩展推荐

```json
"extensions": {
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-typescript-tslint-plugin"
  ],
  "unwantedRecommendations": [
    "hookyqr.beautify",
    "ms-vscode.vscode-typescript-tslint-plugin"
  ]
}
```
- `recommendations`：推荐安装的扩展ID列表
- `unwantedRecommendations`：不推荐安装的扩展ID列表

### 1.6 remoteAuthority - 远程开发设置

```json
"remoteAuthority": "wsl+Ubuntu",
"remote.SSH.defaultExtensions": [
  "gitpod.gitpod-remote-ssh"
],
"remote.containers.defaultExtensions": [
  "ms-azuretools.vscode-docker"
]
```
用于配置远程开发环境

## 2. 项目级配置文件

### 2.1 .vscode/settings.json

```json
{
  "editor.formatOnSave": true,
  "typescript.preferences.importModuleSpecifier": "relative",
  "eslint.validate": ["javascript", "typescript"],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "path-intellisense.mappings": {
    "@": "${workspaceFolder}/src"
  }
}
```
- 特定于项目的设置，优先级高于工作区设置
- 仅应用于所在的项目文件夹

### 2.2 .vscode/launch.json

```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "调试当前服务",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/src/index.js",
      "env": {
        "NODE_ENV": "development"
      },
      "skipFiles": ["<node_internals>/**"],
      "preLaunchTask": "npm: build"
    }
  ]
}
```
- 特定于项目的调试配置
- 可以引用项目中的任务作为前置任务

### 2.3 .vscode/tasks.json

```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "npm: build",
      "type": "npm",
      "script": "build",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$tsc"]
    },
    {
      "label": "测试当前文件",
      "type": "shell",
      "command": "npx jest ${relativeFile}",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    }
  ]
}
```
- 特定于项目的任务配置
- 可以使用预定义变量如`${relativeFile}`

### 2.4 .vscode/extensions.json

```json
{
  "recommendations": [
    "ms-python.python",
    "ms-python.vscode-pylance"
  ],
  "unwantedRecommendations": []
}
```
- 特定于项目的扩展推荐

## 3. 项目依赖配置文件

### 3.1 对于Node.js项目的package.json

```json
{
  "name": "project-name",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.17.1"
  },
  "devDependencies": {
    "typescript": "^4.5.4"
  },
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc",
    "test": "jest"
  }
}
```
- `workspaces`字段用于管理monorepo项目，指定子包位置
- 可以通过`npm run script --workspace=package-name`在特定子包中运行脚本

### 3.2 对于monorepo项目的lerna.json

```json
{
  "version": "independent",
  "npmClient": "yarn",
  "useWorkspaces": true,
  "packages": ["packages/*"],
  "command": {
    "publish": {
      "ignoreChanges": ["*.md"],
      "message": "chore(release): publish"
    },
    "bootstrap": {
      "hoist": true
    }
  }
}
```
- 用于管理多包项目
- 可以配置统一版本或独立版本管理

## 4. 项目间通信与依赖关系

### 4.1 通过本地路径引用

在package.json中：
```json
"dependencies": {
  "shared-lib": "file:../shared-lib"
}
```

### 4.2 TypeScript路径映射

在tsconfig.json中：
```json
{
  "compilerOptions": {
    "baseUrl": "./",
    "paths": {
      "@app/*": ["src/app/*"],
      "@shared/*": ["../shared-project/src/*"]
    }
  }
}
```
- 支持跨项目引用代码
- 需要在webpack或其他构建工具中配置相应的别名

### 4.3 使用project references

在tsconfig.json中：
```json
{
  "references": [
    {"path": "../shared-lib"},
    {"path": "../utils"}
  ],
  "compilerOptions": {
    "composite": true
  }
}
```
- 为TypeScript项目创建依赖图
- 支持增量编译和智能感知

## 5. 配置文件使用最佳实践

1. **分层使用配置**
   - 用户级设置：通用编辑器偏好
   - 工作区设置：项目集合的共享配置
   - 文件夹设置：特定项目的配置

2. **使用模板和共享配置**
   - 将公共配置提取为基础配置文件
   - 使用继承和引用减少重复

3. **版本控制**
   - 将.code-workspace文件和.vscode文件夹添加到版本控制中
   - 共享开发环境配置确保团队一致性

4. **环境变量**
   - 使用.env文件和扩展如DotENV管理不同环境的变量
   - 敏感信息使用环境变量，避免硬编码

5. **项目间调试与联调**
   - 使用复合启动配置启动多个项目
   - 设置依赖任务确保正确的启动顺序

6. **扩展集成**
   - 使用REST Client创建API测试文件
   - 配置Live Share实现实时协作
   - 安装适当的语言服务器和格式化工具

通过合理配置这些文件，您可以创建一个高效、一致且易于协作的开发环境，同时支持项目间的相互调用和依赖管理。
